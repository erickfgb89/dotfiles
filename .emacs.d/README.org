# coding: utf-8
* My Emacs Config
** Predicates
   Predicates we'll use later for options that only apply
   to specific configurations

   #+BEGIN_SRC emacs-lisp
     (defun osx-p ()
       "Check whether we're running OSX"
       (eq system-type 'darwin))

     (defun linux-p ()
       "Check whether we're running linux"
       (eq system-type 'gnu/linux))

     (defun font-family-installed-p (font)
       "Return true if the given font family is installed on this system"
       (member font (font-family-list)))
   #+END_SRC
*** Graphical vs Terminal
    I was going to write a predicate to check for a graphical
    interface, but then I discovered ~display-graphic-p~
** libraries
*** shortcuts
    Small library for adding keybindings with several prefixes at once

    I have an easier time hitting a keybinding with two specials and one letter
    rather than a ~C-x y~ or ~C-x C-y~

    I find that C-M-[x] seems to be bound to something a lot of the time,
    but C-S-[x] is usually free. This is probably because C-S-[x] isn't well
    supported in the world of terminals, which makes it useless when we don't
    have a graphical environment handy.

    I use this library to create bindings with both C-S-[x] and C-c [x], so
    I can keep my convenience bindings with a less convenient C-c prefix.

    Someday, I'll learn to use super and hyper, and I'll finally get away from
    this mess.
    #+BEGIN_SRC emacs-lisp
      (load "~/.emacs.d/custom/lib/shortcuts")
    #+END_SRC
*** projectile library
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/lib/")
      (load "popup-eshell")
    #+END_SRC
** use-package
   Load up use-package, which we'll use to load all other packages
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (package-initialize)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/") t)

     ;; https://github.com/jwiegley/use-package
     (setq use-package-always-ensure t)
     (eval-when-compile
       (require 'use-package))
     (require 'bind-key)
   #+END_SRC

*** Update packages
    from https://github.com/belak/dotfiles/
    I always run into issues when packages I try to download with use-package
    don't exist because I haven't refreshed.

    This advice for package-install runs one implicit refresh while we install 
    stuff for the first time
    #+BEGIN_SRC emacs-lisp
      (defvar refreshed-package-list nil
        "This will be t if the package list has been refreshed.")

      (defun ensure-refreshed ()
        (unless refreshed-package-list
          (package-refresh-contents)
          (setq refreshed-package-list t)))

      (advice-add 'package-install
                  :before
                  (lambda (&rest args)
                    (ensure-refreshed)))
    #+END_SRC
** Disabled Functions
   A bunch of stuff is disabled by default because it's
   too scary to use. There are a few I like to use pretty regularly,
   so I re-enable them here
   | M-l     | downcase-word    |
   | M-u     | upcase-word      |
   | M-c     | capitalize-word  |
   | C-x C-l | downcase-region  |
   | C-x C-u | upcase-region    |
   | C-x C-n | set-goal-column  |
   | C-x n n | narrow-to-region |
   |         |                  |
   #+BEGIN_SRC emacs-lisp
     (put 'downcase-word 'disabled nil) ; M-l
     (put 'upcase-word 'disabled nil) ; M-u
     (put 'capitalize-word 'disabled nil) ; M-c
     (put 'downcase-region 'disabled nil) ; C-x C-l
     (put 'upcase-region 'disabled nil) ; C-x C-u
     (put 'set-goal-column 'disabled nil) ; C-x C-n
     (put 'narrow-to-region 'disabled nil) ; C-x n n
   #+END_SRC
** UI Options
   This started as an effort to disable any unneccessary UI elements,
   like the menu and scroll bars. it's become more of a catch-all for
   global options that don't really fit elsewhere.
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     ;scroll-bar-mode doesn't exist in nw emacs in os x
     (and (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     (and (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     (and (fboundp 'global-font-lock-mode) (global-font-lock-mode 1))
     (transient-mark-mode -1)
     (show-paren-mode 1)
     (column-number-mode 1)
     (fset 'yes-or-no-p 'y-or-n-p)
     ;; whitespace
     (global-whitespace-mode 1)

     ;; input.fontbureau.com
     (if (font-family-installed-p "Input Mono Narrow")
         (set-frame-font (concat "-*-Input Mono Narrow-normal-normal-"
                                 "extracondensed-*-12-*-*-*-m-0-iso10646-1")))

     (setq-default indicate-buffer-boundaries t
                   indent-tabs-mode nil)

     (setq inhibit-startup-message t
           confirm-kill-emacs 'yes-or-no-p
           inhibit-startup-message t
           inhibit-startup-echo-area-message t
           kill-buffer-query-functions (remq
                                        'process-kill-buffer-query-function
                                        kill-buffer-query-functions)
           x-select-enable-clipboard t
           visible-bell 1
           set-mark-command-repeat-pop 1
           require-final-newline t
           ;; https://www.emacswiki.org/emacs/WhiteSpace
           whitespace-line-column 100
           whitespace-style '(face
                              tabs
                              spaces
                              trailing
                              lines-tail
                              ;;space-before-tab::space
                              newline
                              indentation
                              empty
                              ;;space-after-tab::space
                              space-mark
                              tab-mark
                              newline-mark
                              indentation::space)
           face-remapping-alist '((whitespace-tab . whitespace-space-before-tab))
           ;; use-package
           use-package-always-ensure t
           sh-basic-offset 2
           sh-indentation 2
           standard-indent 2)

   #+END_SRC
** Misc. Bindings
   #+BEGIN_SRC emacs-lisp
     (add-shortcuts
      (list
       (cons "o" 'other-window)
       (cons "k" 'kill-this-buffer)
       (cons "s" 'save-buffer)
       (cons "x" 'kmacro-end-or-call-macro)
       (cons "p s" 'sr-speedbar-select-window)
       (cons "f" 'counsel-find-file)
       (cons "b" 'switch-to-buffer)
       )
      )

     (global-set-key (kbd "C-#") 'comment-or-uncomment-region)
     (global-set-key (kbd "M-g") 'goto-line)
     (global-set-key (kbd "RET") 'newline-and-indent)
     (global-set-key (kbd "C-z") 'god-mode)
   #+END_SRC
*** OS-specific
**** OS-X Cmd as Hyper
     #+BEGIN_SRC emacs-lisp
     (setq mac-command-modifier 'hyper) ; make cmd key do Meta
     #+END_SRC
** Vault
   #+BEGIN_SRC emacs-lisp
     (defun find-and-set (token var)
       (save-excursion
         (beginning-of-buffer)
         (search-forward-regexp (concat token " +"))
         (let ((start (point)))
           (end-of-line)
           (setenv var (buffer-substring start (point))))))

     (defun aws-creds (acct)
       (interactive)
       (with-temp-buffer
         (call-process "vault" nil (current-buffer) nil "write"
                       (concat "aws_" acct "/sts/devopser") "ttl=12h")
         (find-and-set "access_key" "AWS_ACCESS_KEY_ID")
         (find-and-set "secret_key" "AWS_SECRET_ACCESS_KEY")
         (find-and-set "security_token" "AWS_SESSION_TOKEN"))
       ;; set variables again in current shell,
       ;; where this function was called
       (setenv "AWS_ACCESS_KEY_ID" (getenv "AWS_ACCESS_KEY_ID"))
       (setenv "AWS_SECRET_ACCESS_KEY" (getenv "AWS_SECRET_ACCESS_KEY"))
       (setenv "AWS_SESSION_TOKEN" (getenv "AWS_SESSION_TOKEN")))

     (defun dev-token ()
       (interactive)
       "Call from eshell to generate dev account credentials"
       (aws-creds "dev"))

     (defun prod-token ()
       (interactive)
       "Call from eshell to generate prod account credentials"
       (aws-creds "prod"))

   #+END_SRC
** TODO Backup files
   I'm pretty sure my backup config doesn't work the way I think it does
   #+BEGIN_SRC emacs-lisp
     ;; delete old backups
     (message "Deleting old backup files")
     (let ((week (* 60 60 24 7))
           (current (float-time (current-time))))
       (dolist (file (directory-files temporary-file-directory t))
         (when (and (backup-file-name-p file)
                    (> (- current (float-time (nth 5 (file-attributes file))))
                       week))
           (message "%s" file)
           (delete-file file))))

     (setq
      backup-by-copying t
      backup-directory-alist
      `((".*" . ,temporary-file-directory))
      auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)


   #+END_SRC
** packages
*** hyperbole
    https://www.gnu.org/software/hyperbole/
    #+BEGIN_SRC emacs-lisp
      (use-package hyperbole)
    #+END_SRC
*** org-mode
**** SRC blocks
     /Note/: Use <s TAB to insert src block (see [[https://orgmode.org/manual/Easy-templates.html][easy templates]])
     #+BEGIN_SRC emacs-lisp
              ;:bind (([remap org-return] . org-return-indent))))
                     (use-package org
                       :init (setq org-src-tab-acts-natively t)
                       :config (org-babel-do-load-languages
                                'org-babel-load-languages
                                '(( ruby . t )
                                  ( ditaa . t )
                                  ( shell . t ))))
     #+END_SRC
***** Editing
     Use ~(C-c ')~ to edit code in its native mode in a separate buffer
     This will trash the current window config
***** Window config undo
      Use ~winner-undo~ (~C-c LEFT~) to restore your previous configuration
      after calling ~org-edit-special~ ~(C-c ')~
*** hydra
    I've been fighting this one for a long time. I use two modifiers
    (typically C-S-) to maintain a state from which I can run any custom commands
    in sequence (e.g. C-S-o-o-o = C-x o C-x o C-x o) but I find myself struggling
    on the terminal since no emulator will send C-S to an app.
*** lua-mode
    #+BEGIN_SRC emacs-lisp
      (use-package lua-mode
       :config
       (setq lua-indent-level 1))
    #+END_SRC
*** multiple-cursors
    #+BEGIN_SRC emacs-lisp
      (use-package multiple-cursors)
    #+END_SRC
*** auto-complete
    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete)
    #+END_SRC
*** Winner
    Undo and redo window configuration changes
    #+BEGIN_SRC emacs-lisp
      (use-package winner
        :hook (org-mode . winner-mode))
    #+END_SRC
*** abbrev
    use snippets to insert common text
    #+BEGIN_SRC emacs-lisp
      (use-package abbrev
        :ensure f
        :init
        (setq abbrev-file-name "~/.emacs.d/abbrev_defs"
              default-abbrev-mode t
              save-abbrevs t)
        (setq-default abbrev-mode t))
    #+END_SRC
*** ace-jump-mode
    Use a hotkey to jump to a word based on its starting character
    #+BEGIN_SRC emacs-lisp
      (use-package ace-jump-mode
        :config
        (add-shortcuts
         '(("j" . ace-jump-word-mode))))
    #+END_SRC
*** aggressive-indent
    Force proper indentation for selected modes
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
                   :mode ( "\\.rb\\'" "\\.hs\\'" "\\.lhs\\'"
                           "\\.yml\\'" "\\.yaml\\'" "\\.java\\'"
                           "\\.js\\'" "\\.sh\\'" "\\.py\\'" )
                   :config
                   (aggressive-indent-mode))
    #+END_SRC
*** caps-lock-mode
    Get caps-lock using an emacs keybinding, because I
    remapped caps lock to Ctrl
    #+BEGIN_SRC emacs-lisp
      (use-package caps-lock
        :init
        (add-shortcuts
         '(("c" . caps-lock-mode))))
    #+END_SRC
*** eshell
    I've been using ~eshell~ instead of ~shell~ or ~term~ but I modify my path
    in both the PATH environment variable and ~exec-path~.
    If I remember correctly, one works for eshell and the other
    for other emulated terminals.
    #+BEGIN_SRC emacs-lisp
      (use-package eshell
        :config
        :defer 1
        :init
        (defvar use-selected-window nil
          "Set to t to use the selected window to run eshell")
        (defvar eshell-pre-command-point nil
          "Point before command is run.")
        (defvar eshell-side-window-height 10
          "Height of a side window created for eshell.")
        (add-shortcuts
         '(("e" . run-eshell)))
        (setenv "VAULT_ADDR" (shell-command-to-string ". ~/.zshrc; echo -n $VAULT_ADDR"))
        (let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
          (setenv "PATH" path)
          (setq exec-path
                (append
                 (split-string-and-unquote path ":")
                 exec-path))))
        ;; (setenv "PATH"
        ;;         (replace-regexp-in-string
        ;;          "~"
        ;;          (getenv "HOME")
        ;;          (concat "~/.rbenv/shims:"
        ;;                  "~/.asdf/shims:"
        ;;                  "~/.asdf/bin:"
        ;;                  "~/.cabal/bin:"
        ;;                  "~/dev/eventer-workstation-utils/bin:"
        ;;                  "/usr/local/bin:"
        ;;                  "~/Library/Python/3.6/bin:"
        ;;                  "~/.local/bin:"
        ;;                  (getenv "PATH"))))
        ;; (setq exec-path
        ;;       (append exec-path
        ;;               (mapcar (lambda (path)
        ;;                         (replace-regexp-in-string
        ;;                          "~"
        ;;                          (getenv "HOME")
        ;;                          path))
        ;;                       '("~/.rbenv/shims"
        ;;                         "~/.asdf/shims"
        ;;                         "~/.asdf/bin"
        ;;                         "~/.cabal/bin"
        ;;                         "~/dev/eventer-workstation-utils/bin"
        ;;                         "~/Library/Python/3.6/bin"
        ;;                         "~/.local/bin"
        ;;                         "/usr/local/bin")))))
    #+END_SRC
**** TODO executables [0/4]
     - [ ] eventer-workstation-utils
       work stuff. I need to turn this into symlinks in ~/bin
     - [ ] ~/.local/bin
       No idea why this is here. I tend to use ~/bin
     - [ ]  /usr/local/bin
       osx - specific. need to rewrite this with the platform predicates
     - [ ] python3
       for running python3 when 2.7 and 3.6 are installed together in 
       os x
     | [[https://github.com/rbenv/rbenv][rbenv]] | Ruby version manager    |
     | [[https://github.com/asdf-vm/asdf][asdf]]  | version manager         |
     | [[https://www.haskell.org/cabal/][cabal]] | Haskell package manager |
**** bmk function
     jump to bookmarks from eshell
     #+BEGIN_SRC emacs-lisp
       ;; from https://www.emacswiki.org/emacs/EshellBmk
       ;; eshell/bmk - version 0.1.3

       (defun pcomplete/eshell-mode/bmk ()
         "Completion for `bmk'"
         (pcomplete-here (bookmark-all-names)))

       (defun eshell/bmk (&rest args)
         "Integration between EShell and bookmarks.
       For usage, execute without arguments."
         (setq args (eshell-flatten-list args))
         (let ((bookmark (car args))
               filename name)
           (cond
            ((eq nil args)
             (format "Usage:
       ,* bmk BOOKMARK to
       ,** either change directory pointed to by BOOKMARK
       ,** or bookmark-jump to the BOOKMARK if it is not a directory.
       ,* bmk . BOOKMARK to bookmark current directory in BOOKMARK.
       Completion is available."))
            ((string= "." bookmark)
             ;; Store current path in EShell as a bookmark
             (if (setq name (car (cdr args)))
                 (progn
                   (bookmark-set name)
                   (bookmark-set-filename name (eshell/pwd))
                   (format "Saved current directory in bookmark %s" name))
               (error "You must enter a bookmark name")))
            (t
              ;; Check whether an existing bookmark has been specified
              (if (setq filename (bookmark-get-filename bookmark))
                  ;; If it points to a directory, change to it.
                  (if (file-directory-p filename)
                      (eshell/cd filename)
                    ;; otherwise, just jump to the bookmark 
                    (bookmark-jump bookmark))
                (error "%s is not a bookmark" bookmark))))))

       ;; end eshell/bmk
     #+END_SRC
**** Select existing eshell buffer
     Switch to eshell buffer instead of creating a duplicate eshell
     buffer if one already exists in the current window configuration
     #+BEGIN_SRC emacs-lisp
       ;; (require 'seq)

       ;; (defun select-or-start-eshell ()
       ;;   "Select visible eshell window or select/create eshell buffer in this window"
       ;;   (interactive)
       ;;   (let* ((esh-buffer-name (if (projectile-project-p)
       ;;                           (concat "*eshell " (projectile-project-name) "*")
       ;;                         "*eshell*"))
       ;;          (e-win (get-buffer-window esh-buffer-name))
       ;;          (eshell-buffer-p (lambda (buffer)
       ;;                             (string-prefix-p "*eshell"
       ;;                                              (buffer-name buffer)))))
       ;;     (cond ((funcall eshell-buffer-p (current-buffer))
       ;;            (bury-buffer)
       ;;            (switch-to-buffer (car (seq-filter eshell-buffer-p
       ;;                                               (buffer-list)))))
       ;;           (e-win (select-window e-win))
       ;;           ((get-buffer esh-buffer-name) (switch-to-buffer esh-buffer-name))
       ;;           ((projectile-project-p) (projectile-run-eshell))
       ;;           (t (eshell)))))
     #+END_SRC
**** Eshell command hooks
     Enlarge eshell window to 80% of frame height on command output, if necessary
     #+BEGIN_SRC emacs-lisp

     #+END_SRC
**** Eshell prompt
     #+BEGIN_EXAMPLE
     ┌─[/path/to/cwd@branch]──[hh:mm]──[rbenv_version]──[exit_code_if_error]
     └─> $
     #+END_EXAMPLE
     #+BEGIN_SRC emacs-lisp
       (setq eshell-prompt-function
             (lambda ()
               (let ((frame 'eshell-prompt)
                     (path 'eshell-ls-directory)
                     (vcs 'eshell-ls-readonly)
                     (data 'dired-ignored)
                     (err 'dired-warning))
              (concat
               (propertize "┌─[" 'face 'eshell-prompt)
               (propertize (concat (eshell/pwd)) 'face path)
               (propertize "@" 'face frame)
               (if (magit-get-current-branch)
                   (propertize (magit-get-current-branch) 'face vcs)
                   (propertize "z" 'face vcs))
               (propertize "]──[" 'face frame)
               (propertize (format-time-string "%H:%M" (current-time)) 'face data)
               (propertize "]" 'face frame)
               (if (member (car
                            (split-string
                             (symbol-name (projectile-project-type)) "-"))
                           '("rails" "ruby"))
                   (let ((v (shell-command-to-string "rbenv version")))
                     (string-match
                      "\\([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\\)" v)
                     (concat
                      (propertize "──[" 'face frame)
                      (propertize (match-string 1 v)
                                  'face data)
                      (propertize "]" 'face frame))))
               (if (not (eq 0 eshell-last-command-status))
                   (concat
                    (propertize "──[" 'face frame)
                    (propertize (number-to-string
                                 eshell-last-command-status)
                                'face err)
                    (propertize "]" 'face frame)))
               "\n"
               (propertize "└─>" 'face frame)
               (propertize (if (= (user-uid) 0) " #" " $") 'face frame)
               " "
               ))))
     #+END_SRC
*** god-mode
    Run commands without modifiers. I don't use it much,
    but it comes in handy when I'm browsing around
    and don't have a searchable expression in mind
    [[https://github.com/chrisdone/god-mode][god-mode]]
    #+BEGIN_SRC emacs-lisp
      (use-package god-mode
        :disabled
        :bind (("C-z" . god-mode)))
    #+END_SRC
*** groovy-mode
    force groovy-mode for Jenkins pipeline files
    #+BEGIN_SRC emacs-lisp
      (use-package groovy-mode
        :mode "Jenkinsfile\\'"
        :init (setq groovy-indent-offset 2))
    #+END_SRC
*** haskell-mode
    Use for vanilla and literate Haskell files
    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :mode "\\.\\(l\\)?hs\\'")
    #+END_SRC
*** ivy
    I'm still bouncing back and forth between ivy and helm.
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :config
        (ivy-mode 1)
        :init
        (setq ivy-re-builders-alist
              '((t . ivy--regex-plus)))
        (add-shortcuts
         '(("f" . find-file))))
      (use-package swiper
        :config
        (add-shortcuts
         '(("u s" . swiper))))
      (use-package counsel)
    #+END_SRC
*** helm
    I don't use [[https://emacs-helm.github.io/helm/][helm]] super consistently.
    It's pretty or whatever but the flashing text
    can be distracting when I know what I want.

    I'll probably take a break from helm when I come up
    with a reliable way to use fuzzy completion for /everything/.
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :disabled
        :init
          (setq helm-semantic-fuzzy-match t
                helm-imenu-fuzzy-match t)
        :bind (("M-x" . helm-M-x))
        :config
          (add-shortcuts
           '(("f" . helm-find-files)
             ("b" . helm-mini)
             ("h" . helm-command-prefix)))
        :init
          (helm-mode))
    #+END_SRC
*** js2-mode
    enable javascript highlighting for js and json files
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :mode "\\.js\\'"
        :init (setq js-indent-level 2))
    #+END_SRC
*** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (add-shortcuts
         '(("g s" . magit-status)
           ("g c" . magit-commit)
           ("g p" . magit-push-current-to-upstream)
           ("g d" . magit-pull-branch))))
    #+END_SRC
*** markdown-mode
    Works out of the box!
    #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode)
    #+END_SRC
*** mode-icons
    Display icons for current mode
    #+BEGIN_SRC emacs-lisp
      (use-package mode-icons
        :if (display-graphic-p)
        :config
        (mode-icons-mode))
    #+END_SRC
*** projectile
    #+BEGIN_SRC emacs-lisp
      ;;http://crypt.codemancers.com/posts/2013-09-26-setting-up-emacs-as-development-environment-on-osx/
      ;;Install exuberant-ctags if ctags fails

      (use-package projectile
        :defer 2
        :config
        (projectile-global-mode)
        (setq projectile-switch-project-action 'wg-switch-to-project
              projectile-enable-caching t
              projectile-project-search-path '("~/dev/"))
        :init
        (add-shortcuts
         '(("p p" . projectile-switch-project)
           ("p b" . projectile-switch-to-buffer)
           ("p g" . projectile-grep)
           ("p f" . projectile-find-file)
           ("p t" . projectile-find-tag)
           ("p c" . projectile-commander))))

      ;; projectile-speedbar-open-current-buffer-in-tree
      (use-package projectile-speedbar
        :disabled)

      ;; https://github.com/bbatsov/helm-projectile
      (use-package helm-projectile
        :disabled
        :config
        (add-shortcuts
         '(("p p" . helm-projectile-switch-project)
           ("p b" . helm-projectile-switch-to-buffer)
           ("p g" . helm-projectile-grep)
           ("p f" . helm-projectile-find-file)
           ("p t" . helm-projectile-find-tag)
           ("p c" . projectile-commander)))
        :init
        (setq projectile-completion-system 'helm)
        (helm-projectile-on))
    #+END_SRC
*** python-mode
    #+BEGIN_SRC emacs-lisp
      (use-package python
        :mode ("\\.py\\'" . python-mode)
        :interpreter ("python" . python-mode)
        :config
        (message "in python mode")
        (setq python-indent 2
              python-indent-offset 2))
    #+END_SRC
*** racket-mode
    #+BEGIN_SRC emacs-lisp
    (use-package racket-mode)
    #+END_SRC
*** rainbow-delimiters
    https://github.com/Fanael/rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters)
    #+END_SRC
*** recentf
    #+BEGIN_SRC emacs-lisp
      ;; Mostly from: https://masteringemacs.org/article/find-files-faster-recent-files-package

      (defun ido-recentf-open ()
        "Use `ido-completing-read' to \\[find-file] a recent file"
        (interactive)
        (if (find-file (ido-completing-read "Find recent file: " recentf-list))
            (message "Opening file...")
          (message "Aborting")))

      (use-package recentf
        :init (setq recentf-max-saved-items 50)
        :config
        (recentf-mode t)
        (add-shortcuts '(("r" . ido-recentf-open))))
    #+END_SRC
*** flymake
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :hook (ruby-mode . flycheck-mode)
        :config (setq-default
                 flycheck-disabled-checkers
                 '(chef-foodcritic
                   ; can't stand the bogus errors from reek
                   ruby-reek)))
      (use-package helm-flycheck)
    #+END_SRC
*** robe
    #+BEGIN_SRC emacs-lisp
      (use-package robe
        :hook (ruby-mode . robe-mode)
        :init
        (add-hook 'robe-mode-hook 'ac-robe-setup))
      (use-package helm-robe)
    #+END_SRC
*** ruby
    I always forget the more common robe commands
    https://melpa.org/#/robe
    |         |                          |
    |---------+--------------------------|
    | M-.     | jump to definition       |
    | M-,     | jump back                |
    | C-c C-d | see documentation        |
    | C-c C-k | refresh rails env        |
    | C-M-i   | complete symbol at point |
    | C-c C-l | reload file              |
    #+BEGIN_SRC emacs-lisp
      (use-package ruby-mode
        :mode "\\.rb\\'"
        :config
        (setq rbenv-installation-dir "/usr/local/bin/")
        (defadvice inf-ruby-console-auto (before activate-rbenv-for-robe activate)
          (rbenv-use-corresponding))
        (when (eq system-type 'darwin)
          (setq projectile-tags-command "/usr/local/bin/ctags -Re -f \"%s\" %s")))
    #+END_SRC
*** solarized
    Color scheme I picked up at work and use everywhere I go.
    [[https://ethanschoonover.com/solarized/][Check it out!]]
    #+BEGIN_SRC emacs-lisp
      (use-package solarized-theme
        :config
        (if (display-graphic-p)
            (progn
              (load-theme 'solarized-dark t)
              (enable-theme 'solarized-dark)))
        :init
        (setq frame-background-mode 'dark))
    #+END_SRC
*** sr-speedbar
    I only use one frame, so I use sr-speedbar to keep it
    tacked on.
    I've been taking a break from this thing for a while.
    It's awesome, but I have a hard time breaking my flow
    to hit a persistent window to find a method or whatever.
    #+BEGIN_SRC emacs-lisp
      ;;; For other options
      ;;; https://www.emacswiki.org/emacs/SrSpeedbar

      (use-package sr-speedbar
        :disabled
        :init
        (setq
         sr-speedbar-skip-other-window-p t
         speedbar-directory-unshown-regexp "^\\.git$"
         speedbar-show-unknown-files t
         sr-speedbar-width-x 50
         sr-speedbar-max-width 50
         sr-speedbar-default-width 50)
        :config
        (speedbar-add-supported-extension
         (list ".rb"
               "Rakefile"
               ".sh"))
        (set-process-sentinel
         (start-process "sleep" "*sleep*" "sleep" "2")
         (function (lambda (proc desc) (sr-speedbar-toggle)))))
    #+END_SRC
*** stackexchange
    Dig up solutions on stack exchange from emacs
    #+BEGIN_SRC emacs-lisp
      (use-package sx)

      (use-package howdoi)
    #+END_SRC
*** undo-tree
    I very very rarely find myself in the middle of a weird, branching
    undo tree, but when I do, this definitely comes in handy.
    #+BEGIN_SRC emacs-lisp
      ;; https://cestlaz.github.io/posts/using-emacs-16-undo-tree/
      (use-package undo-tree
        :ensure t
        :init
        (global-undo-tree-mode))
    #+END_SRC
*** workgroups
    The best way I've found to context-switch when something comes up.
    #+BEGIN_SRC emacs-lisp
      (use-package workgroups2
        :config
        (setq wg-emacs-exit-save-behavior nil             ; Options: 'save 'ask nil
              wg-workgroups-mode-exit-save-behavior nil   ; Options: 'save 'ask nil
              wg-mode-line-display-on t                   ; Default: (not (featurep 'powerline))
              wg-flag-modified t                          ; Display modified flags as well
              wg-mode-line-decor-left-brace "["
              wg-mode-line-decor-right-brace "]"          ; how to surround it
              wg-mode-line-decor-divider ":")
        (add-shortcuts
         '(("w c" . wg-create-workgroup)
           ("w o" . wg-switch-to-workgroup)
           ("w k" . wg-kill-workgroup)
           ("w w" . wg-kill-workgroup-and-buffers)))
        (workgroups-mode))
    #+END_SRC
**** Create a workgroup based on a projectile project name
     I'd like to have a predefined workgroup layout triggered on 'projectile-switch-to-project
     #+BEGIN_SRC emacs-lisp
       (defun wg-switch-to-project ()
         (if (projectile-project-p)
             (let* ((project-name (projectile-project-name))
                    (workgroup (wg-get-workgroup project-name t)))
               (if (window-dedicated-p)
                   (other-window 1))
               (if workgroup ;wg exists
                   (wg-switch-to-workgroup workgroup)
                 (wg-create-workgroup project-name)
                 (delete-other-windows)
                 (find-file (wg-get-first-existing-dir))
                 (projectile-commander)))))
     #+END_SRC
*** yaml
    Including ~.yml~ and ~.yml.erb~
    #+BEGIN_SRC emacs-lisp
      (use-package yaml-mode
        :mode "\\.yml\\'"
        :mode "\\.yml\\.erb\\'" )
    #+END_SRC
*** zsh
    I use zsh outside of emacs, and any time I run into
    weird issues with eshell
    #+BEGIN_SRC emacs-lisp
      (setq shell-file-name "zsh")
    #+END_SRC
*** ecb
    I *loved* ecb as a development environment.
    I ran into an issue once upon a time where using tab-completion
    with ~find-file~ would bring up completions in the eshell window,
    disable further tab completion and disable ~quit~.
    It was horribly disruptive.

    I saw a few failed fixes but haven't looked at it in a while, or
    tried with helm, since helm would manage its own windows for
    fuzzy completion.
    #+BEGIN_SRC emacs-lisp
      ;; Tmp-ish fix for still-active issue:
      ;; https://github.com/ecb-home/ecb/issues/10
      ;; (defun display-buffer-at-bottom--display-buffer-at-bottom-around
      ;;     (orig-fun &rest args)
      ;; "Bugfix for ECB: cannot use display-buffer-at-bottom',
      ;; calldisplay-buffer-use-some-window' instead in ECB frame."
      ;; (if (and ecb-minor-mode (equal (selected-frame) ecb-frame))
      ;; (apply 'display-buffer-use-some-window args)
      ;; (apply orig-fun args)))
      ;; (advice-add
      ;;  'display-buffer-at-bottom :around
      ;;  #'display-buffer-at-bottom--display-buffer-at-bottom-around)

      (use-package ecb
                   :disabled
                   :init
                   (setq
                    ecb-eshell-auto-activate t
                    ecb-eshell-buffer-sync 'always
                    ;;ecb-layout-name "left15"
                    ecb-layout-name "left7"
                    ecb-compile-window-height 6
                    ecb-compile-window-width 'edit-window
                    ecb-compile-window-temporarily-enlarge 'after-selection
                    ecb-windows-width 0.2
                    ecb-auto-activate nil
                    ecb-other-window-behavior 'smart
                    ecb-show-sources-in-directories-buffer 'always
                    auto-expand-directory-tree 'best
                    ecb-eshell-enlarge-when-eshell t
                    ecb-tip-of-the-day nil)
                   :config
                   (add-shortcuts
                    '(("t d" . ecb-goto-window-directories)
                      ("t s" . ecb-goto-window-sources)
                      ("t h" . ecb-goto-window-history)
                      ("t m" . ecb-goto-window-methods)))
                   (set-process-sentinel
                    (start-process "sleep" "*sleep*" "sleep" "2" )
                    (lambda (a b)
                      (ecb-activate)
                      (eshell))))
    #+END_SRC
*** smart-mode-line
    https://github.com/Malabarba/smart-mode-line
    #+BEGIN_SRC emacs-lisp
      (use-package smart-mode-line
        :init
        (setq sml/no-confirm-load-theme t
              sml/theme 'respectful)
        (sml/setup))
    #+END_SRC
*** rinari
    https://github.com/eschulte/rinari
    rails minor mode
    #+BEGIN_SRC emacs-lisp
      (use-package rinari)
    #+END_SRC
*** pug-mode
    for pug (jade), a nodejs templating system
    https://pugjs.org/
    #+BEGIN_SRC emacs-lisp
      (use-package pug-mode
        :config
        (setq pug-tab-width 2))
    #+END_SRC
